{"version":3,"sources":["components/Restaurant.js","components/Restaurants.js","App.js","serviceWorker.js","index.js"],"names":["Restaurant","props","sharp","className","name","src","image","alt","description","city","blur","hash","width","height","useState","element","setElement","onMouseEnter","onMouseLeave","Restaurants","restaurantMap","restaurants","map","restaurant","key","blurhash","App","jsonData","require","i","length","push","initialElement","refAZ","useRef","refZA","useEffect","restaurantsAZ","slice","sort","a","b","restaurantsZA","current","sortRestaurants","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mvmBA4DeA,MAzDf,SAAoBC,GAOhB,IAAMC,EACF,yBAAKC,UAAU,kBACX,uBAAGA,UAAU,QACRF,EAAMG,MAEX,yBAAKD,UAAU,aACXE,IAAKJ,EAAMK,MACXC,IAAI,SACR,uBAAGJ,UAAU,eACRF,EAAMO,aAEX,uBAAGL,UAAU,QAAb,KACOF,EAAMQ,OASfC,EACF,yBAAKP,UAAU,oBACX,kBAAC,IAAD,CAAUA,UAAU,eAChBQ,KAAMV,EAAMU,KACZC,MAAO,IACPC,OAAQ,MAEZ,uBAAGV,UAAU,gBACRF,EAAMG,OApCI,EAyCOU,mBAASJ,GAzChB,mBAyChBK,EAzCgB,KAyCPC,EAzCO,KAkDvB,OACI,yBAAKb,UAAU,sBAAsBc,aARzC,WACID,EAAWd,IAO0DgB,aAJzE,WACIF,EAAWN,KAINK,ICxBEI,MArBf,SAAqBlB,GAEnB,IAEMmB,EAFcnB,EAAMoB,YAEQC,KAAI,SAAAC,GAAU,OAC9C,kBAAC,EAAD,CAAYpB,UAAU,aACpBqB,IAAKD,EAAWnB,KAChBA,KAAMmB,EAAWnB,KACjBE,MAAOiB,EAAWjB,MAClBK,KAAMY,EAAWE,SACjBjB,YAAae,EAAWf,YACxBC,KAAMc,EAAWd,UAGrB,OACA,yBAAKN,UAAU,sBACZiB,IC0CUM,MAhEf,WAQE,IALA,IAAIC,EAAWC,EAAQ,IAEnBP,EAAc,GAGTQ,EAAI,EAAGA,EAAIF,EAASN,YAAYS,OAAQD,IAAK,CACpD,IAAIN,EAAaI,EAASN,YAAYQ,GACtCR,EAAYU,KAAKR,GAInB,IAAMS,EAAiB,kBAAC,EAAD,CAAaX,YAAaA,IAdpC,EAiBiBP,mBAASkB,GAjB1B,mBAiBNjB,EAjBM,KAiBGC,EAjBH,KAuBPiB,EAAQC,iBAAOF,GACfG,EAAQD,iBAAOF,GAmBrB,OAlBAI,qBAAU,YACR,WACE,IAAMC,EAAgBhB,EAAYiB,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpC,KAAOqC,EAAErC,KAAQ,EAAMqC,EAAErC,KAAOoC,EAAEpC,MAAS,EAAI,KACrGsC,EAAgBrB,EAAYiB,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpC,KAAOqC,EAAErC,KAAQ,EAAMqC,EAAErC,KAAOoC,EAAEpC,MAAS,EAAI,KAC3G6B,EAAMU,QAAU,kBAAC,EAAD,CAAatB,YAAagB,IAC1CF,EAAMQ,QAAU,kBAAC,EAAD,CAAatB,YAAaqB,IAE5CE,KACC,CAACvB,IAWF,yBAAKlB,UAAU,OACb,gCACE,wBAAIA,UAAU,SAAd,eACA,yBAAKA,UAAU,gBACXY,IAAYiB,GAAkBjB,IAAYoB,EAAMQ,QAChD,4BAAQxC,UAAU,UAAU0C,QAVtC,WACE7B,EAAWiB,EAAMU,WAS0C,iDACnD,4BAAQxC,UAAU,UAAU0C,QAdtC,WACE7B,EAAWmB,EAAMQ,WAa0C,iDAAnD,KAEF,0BAAMxC,UAAU,SAAhB,0EAKJ,yBAAKA,UAAU,0BACZY,KClDW+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eb307e18.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Blurhash } from \"react-blurhash\";\r\n\r\nfunction Restaurant(props) {\r\n\r\n    /**\r\n     *  Element for focused restaurants. Contains the name, the picture, the description and the city\r\n     *  of the restaurant.\r\n     * */\r\n\r\n    const sharp =\r\n        <div className=\"sharpContainer\">\r\n            <p className=\"name\">\r\n                {props.name}\r\n            </p>\r\n            <img className=\"sharpImage\"\r\n                src={props.image}\r\n                alt=\"Food\"/>\r\n            <p className=\"description\">\r\n                {props.description}\r\n            </p>\r\n            <p className=\"city\">\r\n                @ {props.city}\r\n            </p>\r\n\r\n        </div>\r\n\r\n    /**\r\n     * Element for blurred restaurants. Contains the name of the restaurant on top of the blurred image of the restaurant.\r\n     * The blurred image is generated with react-blurhash by woltapp. For more details https://github.com/woltapp/react-blurhash.\r\n     */\r\n    const blur =\r\n        <div className=\"blurredContainer\">\r\n            <Blurhash className=\"blurredImage\"\r\n                hash={props.hash}\r\n                width={300}\r\n                height={300}\r\n            />\r\n            <p className=\"blurredTitle\">\r\n                {props.name}\r\n            </p>\r\n        </div>\r\n\r\n    // Current status of the restaurant. Is either 'sharp' or 'blur'.\r\n    const [element, setElement] = useState(blur);\r\n\r\n    function handleMouseEnter() {\r\n        setElement(sharp)\r\n    }\r\n\r\n    function handleMouseLeave() {\r\n        setElement(blur)\r\n    }\r\n    return (\r\n        <div className=\"restaurantContainer\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n            {element}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Restaurant;","import React from 'react';\r\nimport Restaurant from './Restaurant';\r\n\r\n\r\n/**\r\n * Component representing the whole list of restaurants. Can be called with different orderings\r\n * of restaurants. \r\n *\r\n *  @param {*} props Attribute restaurants contains the array of restaurants to be returned.\r\n */\r\nfunction Restaurants(props) {\r\n\r\n  const restaurants = props.restaurants\r\n\r\n  const restaurantMap = restaurants.map(restaurant => (\r\n    <Restaurant className=\"restaurant\"\r\n      key={restaurant.name}\r\n      name={restaurant.name}\r\n      image={restaurant.image}\r\n      hash={restaurant.blurhash}\r\n      description={restaurant.description}\r\n      city={restaurant.city}\r\n    />\r\n  ))\r\n  return (\r\n  <div className=\"orderedRestaurants\">\r\n    {restaurantMap}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Restaurants;","import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport Restaurants from './components/Restaurants';\r\n\r\nfunction App() {\r\n\r\n  // Fetch data from the local restaurants.json-file.\r\n  var jsonData = require('./restaurants.json');\r\n\r\n  var restaurants = [];\r\n\r\n  // Loop trough the JSON-Array and add them into the js-array.\r\n  for (var i = 0; i < jsonData.restaurants.length; i++) {\r\n    var restaurant = jsonData.restaurants[i];\r\n    restaurants.push(restaurant)\r\n  };\r\n\r\n  // The initial Restaurants-element based on the order in the JSON-file\r\n  const initialElement = <Restaurants restaurants={restaurants} />\r\n\r\n  // The state that contains the Restaurants-element in the wanted order (initial, A-Z or Z-A).\r\n  const [element, setElement] = useState(initialElement)\r\n\r\n  /**\r\n   * Create the A-Z and Z-A elements once and store them in ref-containers.\r\n   * The effect runs after the initial render.\r\n  */\r\n  const refAZ = useRef(initialElement)\r\n  const refZA = useRef(initialElement)\r\n  useEffect(() => {\r\n    function sortRestaurants() {\r\n      const restaurantsAZ = restaurants.slice().sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0));\r\n      const restaurantsZA = restaurants.slice().sort((a, b) => (a.name < b.name) ? 1 : ((b.name < a.name) ? -1 : 0));\r\n      refAZ.current = <Restaurants restaurants={restaurantsAZ} />\r\n      refZA.current = <Restaurants restaurants={restaurantsZA} />\r\n    }\r\n    sortRestaurants()\r\n  }, [restaurants])\r\n\r\n  // Functions for handling sort-button clicks.\r\n  function handleSortZA() {\r\n    setElement(refZA.current)\r\n  }\r\n  function handleSortAZ() {\r\n    setElement(refAZ.current)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header>\r\n        <h1 className=\"title\">Restaurants</h1>\r\n        <div className=\"headerfooter\">\r\n          {(element === initialElement || element === refZA.current) ?\r\n            <button className=\"sortbtn\" onClick={handleSortAZ}><span>Sort Ascending</span></button> :\r\n            <button className=\"sortbtn\" onClick={handleSortZA}><span>Sort Descending</span> </button>\r\n          }\r\n          <span className=\"intro\">\r\n            Summer 2020 Internships - Engineering Pre-assignment by Ekku Jokinen\r\n        </span>\r\n        </div>\r\n      </header>\r\n      <div className=\"restataurantsContainer\">\r\n        {element}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}