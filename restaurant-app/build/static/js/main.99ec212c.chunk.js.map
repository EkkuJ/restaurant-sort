{"version":3,"sources":["components/restaurant.js","components/Restaurants.js","App.js","serviceWorker.js","index.js"],"names":["Restaurant","props","sharp","className","name","src","image","alt","description","city","blur","hash","width","height","useState","element","setElement","onMouseEnter","onMouseLeave","Restaurants","restaurantMap","restaurants","map","restaurant","key","blurhash","App","jsonData","require","i","length","push","initialElement","refAZ","useRef","refZA","useEffect","restaurantsAZ","slice","sort","a","b","restaurantsZA","current","sortRestaurants","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mvmBA4DeA,MAzDf,SAAoBC,GAOhB,IAAMC,EACF,yBAAKC,UAAU,kBACX,uBAAGA,UAAU,QACRF,EAAMG,MAEX,yBAAKD,UAAU,aACXE,IAAKJ,EAAMK,MACXC,IAAI,SACR,uBAAGJ,UAAU,eACRF,EAAMO,aAEX,uBAAGL,UAAU,QAAb,KACOF,EAAMQ,OASfC,EACF,yBAAKP,UAAU,oBACX,kBAAC,IAAD,CAAUA,UAAU,eAChBQ,KAAMV,EAAMU,KACZC,MAAO,IACPC,OAAQ,MAEZ,uBAAGV,UAAU,gBACRF,EAAMG,OApCI,EAyCOU,mBAASJ,GAzChB,mBAyChBK,EAzCgB,KAyCPC,EAzCO,KAkDvB,OACI,yBAAKb,UAAU,sBAAsBc,aARzC,WACID,EAAWd,IAO0DgB,aAJzE,WACIF,EAAWN,KAINK,ICxBEI,MArBf,SAAqBlB,GAEnB,IAEMmB,EAFcnB,EAAMoB,YAEQC,KAAI,SAAAC,GAAU,OAC9C,kBAAC,EAAD,CAAYpB,UAAU,aACpBqB,IAAKD,EAAWnB,KAChBA,KAAMmB,EAAWnB,KACjBE,MAAOiB,EAAWjB,MAClBK,KAAMY,EAAWE,SACjBjB,YAAae,EAAWf,YACxBC,KAAMc,EAAWd,UAGrB,OACA,yBAAKN,UAAU,sBACZiB,IC0CUM,MAhEf,WAQE,IALA,IAAIC,EAAWC,EAAQ,IAEnBP,EAAc,GAGTQ,EAAI,EAAGA,EAAIF,EAASN,YAAYS,OAAQD,IAAK,CACpD,IAAIN,EAAaI,EAASN,YAAYQ,GACtCR,EAAYU,KAAKR,GAInB,IAAMS,EAAiB,kBAAC,EAAD,CAAaX,YAAaA,IAdpC,EAiBiBP,mBAASkB,GAjB1B,mBAiBNjB,EAjBM,KAiBGC,EAjBH,KAuBPiB,EAAQC,iBAAOF,GACfG,EAAQD,iBAAOF,GAmBrB,OAlBAI,qBAAU,YACR,WACE,IAAMC,EAAgBhB,EAAYiB,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpC,KAAOqC,EAAErC,KAAQ,EAAMqC,EAAErC,KAAOoC,EAAEpC,MAAS,EAAI,KACrGsC,EAAgBrB,EAAYiB,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpC,KAAOqC,EAAErC,KAAQ,EAAMqC,EAAErC,KAAOoC,EAAEpC,MAAS,EAAI,KAC3G6B,EAAMU,QAAU,kBAAC,EAAD,CAAatB,YAAagB,IAC1CF,EAAMQ,QAAU,kBAAC,EAAD,CAAatB,YAAaqB,IAE5CE,KACC,CAACvB,IAWF,yBAAKlB,UAAU,OACb,gCACE,wBAAIA,UAAU,SAAd,eACA,yBAAKA,UAAU,gBACXY,IAAYiB,GAAkBjB,IAAYoB,EAAMQ,QAChD,4BAAQxC,UAAU,UAAU0C,QAVtC,WACE7B,EAAWiB,EAAMU,WAS0C,iDACnD,4BAAQxC,UAAU,UAAU0C,QAdtC,WACE7B,EAAWmB,EAAMQ,WAa0C,iDAAnD,KAEF,0BAAMxC,UAAU,SAAhB,mFAKJ,yBAAKA,UAAU,0BACZY,KClDW+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.99ec212c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Blurhash } from \"react-blurhash\";\n\nfunction Restaurant(props) {\n\n    /**\n     *  Element for focused restaurants. Contains the name, the picture, the description and the city\n     *  of the restaurant.\n     * */\n\n    const sharp =\n        <div className=\"sharpContainer\">\n            <p className=\"name\">\n                {props.name}\n            </p>\n            <img className=\"sharpImage\"\n                src={props.image}\n                alt=\"Food\"/>\n            <p className=\"description\">\n                {props.description}\n            </p>\n            <p className=\"city\">\n                @ {props.city}\n            </p>\n\n        </div>\n\n    /**\n     * Element for blurred restaurants. Contains the name of the restaurant on top of the blurred image of the restaurant.\n     * The blurred image is generated with react-blurhash by woltapp. For more details https://github.com/woltapp/react-blurhash.\n     */\n    const blur =\n        <div className=\"blurredContainer\">\n            <Blurhash className=\"blurredImage\"\n                hash={props.hash}\n                width={300}\n                height={300}\n            />\n            <p className=\"blurredTitle\">\n                {props.name}\n            </p>\n        </div>\n\n    // Current status of the restaurant. Is either 'sharp' or 'blur'.\n    const [element, setElement] = useState(blur);\n\n    function handleMouseEnter() {\n        setElement(sharp)\n    }\n\n    function handleMouseLeave() {\n        setElement(blur)\n    }\n    return (\n        <div className=\"restaurantContainer\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n            {element}\n        </div>\n    );\n}\n\nexport default Restaurant;","import React from 'react';\nimport Restaurant from './restaurant';\n\n\n/**\n * Component representing the whole list of restaurants. Can be called with different orderings\n * of restaurants. \n *\n *  @param {*} props Attribute restaurants contains the array of restaurants to be returned.\n */\nfunction Restaurants(props) {\n\n  const restaurants = props.restaurants\n\n  const restaurantMap = restaurants.map(restaurant => (\n    <Restaurant className=\"restaurant\"\n      key={restaurant.name}\n      name={restaurant.name}\n      image={restaurant.image}\n      hash={restaurant.blurhash}\n      description={restaurant.description}\n      city={restaurant.city}\n    />\n  ))\n  return (\n  <div className=\"orderedRestaurants\">\n    {restaurantMap}\n  </div>\n  );\n}\n\nexport default Restaurants;","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Restaurants from './components/Restaurants';\n\nfunction App() {\n\n  // Fetch data from the local restaurants.json-file.\n  var jsonData = require('./restaurants.json');\n\n  var restaurants = [];\n\n  // Loop trough the JSON-Array and add them into the js-array.\n  for (var i = 0; i < jsonData.restaurants.length; i++) {\n    var restaurant = jsonData.restaurants[i];\n    restaurants.push(restaurant)\n  };\n\n  // The initial Restaurants-element based on the order in the JSON-file\n  const initialElement = <Restaurants restaurants={restaurants} />\n\n  // The state that contains the Restaurants-element in the wanted order (initial, A-Z or Z-A).\n  const [element, setElement] = useState(initialElement)\n\n  /**\n   * Create the A-Z and Z-A elements once and store them in ref-containers.\n   * The effect runs after the initial render.\n  */\n  const refAZ = useRef(initialElement)\n  const refZA = useRef(initialElement)\n  useEffect(() => {\n    function sortRestaurants() {\n      const restaurantsAZ = restaurants.slice().sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0));\n      const restaurantsZA = restaurants.slice().sort((a, b) => (a.name < b.name) ? 1 : ((b.name < a.name) ? -1 : 0));\n      refAZ.current = <Restaurants restaurants={restaurantsAZ} />\n      refZA.current = <Restaurants restaurants={restaurantsZA} />\n    }\n    sortRestaurants()\n  }, [restaurants])\n\n  // Functions for handling sort-button clicks.\n  function handleSortZA() {\n    setElement(refZA.current)\n  }\n  function handleSortAZ() {\n    setElement(refAZ.current)\n  }\n\n  return (\n    <div className=\"App\" >\n      <header>\n        <h1 className=\"title\">Restaurants</h1>\n        <div className=\"headerfooter\">\n          {(element === initialElement || element === refZA.current) ?\n            <button className=\"sortbtn\" onClick={handleSortAZ}><span>Sort Ascending</span></button> :\n            <button className=\"sortbtn\" onClick={handleSortZA}><span>Sort Descending</span> </button>\n          }\n          <span className=\"intro\">\n            A restaurant sorter by Ekku Jokinen. Restaurant information provided by WOLT.\n        </span>\n        </div>\n      </header>\n      <div className=\"restataurantsContainer\">\n        {element}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}